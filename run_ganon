configfile: "config.yml"

workdir: config["workdir"]

rule all:
    input:
        fq = ["results/postprocessing/" + str(sample) + ".tsv" for sample in config["samples"]]

rule extract_files:
    input:
        taxdump = config["ncbi_taxonomy"],
        taxid = config["ncbi_taxid"],
        refseq = config["ncbi_refseq"]
    output:
        taxdump = "results/extracted_files/ncbi_taxonomy/taxdump.tar.gz",
        taxid = "results/extracted_files/ncbi_taxonomy/accession2taxid/nucl_gb.accession2taxid.gz",
        refseq = "results/extracted_files/refseq/refseq_files.txt"
    params:
        base_output_folder = "results/extracted_files",
        taxid_output_folder = "results/extracted_files/ncbi_taxonomy/accession2taxid",
        ncbi_taxonomy_folder = "results/extracted_files/ncbi_taxonomy",
        refseq_output_folder = "results/extracted_files/refseq"
    shell:
        """
        tar -xf {input.taxdump} -C {params.base_output_folder}
        tar -xf {input.taxid} -C {params.ncbi_taxonomy_folder}
        mv {params.ncbi_taxonomy_folder}/ncbi_taxonomy_accession2taxid/* {params.taxid_output_folder}/
        tar -xf {input.refseq} -C {params.refseq_output_folder}
        for f in {params.refseq_output_folder}/*.gz; do ls -1 "$f" >> {output.refseq}; done
        """

rule acc_assembly:
    input:
        "results/extracted_files/refseq/refseq_files.txt"
    output:
        "results/seqinfo/acc_assembly.txt"
    params:
        refseq_folder = "results/extracted_files/refseq"
    shell:
        """
        for f in {params.refseq_folder}/*.gz; do zgrep -H -o '>\\S*' "$f" | sed 's@.*/@@g' | sed 's@:@_@g' | awk '{{n=split($1,a,"_");print $2a[1]"_"a[2]a[n-1]"_"a[n]}}' | awk -F ">" '{{print $2"\\t"$1}}'; done > {output}
        """

rule concat_refseq:
    input:
        "results/extracted_files/refseq/refseq_files.txt"
    output:
        "results/concatenated_refseq/refseq.fna.gz"
    params:
        refseq_output_folder = "results/extracted_files/refseq"
    shell:
        """
        for f in {params.refseq_output_folder}/*.gz; do cat "$f" >> {output}; done
        """

rule acc_len_taxid:
    input:
        taxdump = "results/extracted_files/ncbi_taxonomy/taxdump.tar.gz",
        refseq = "results/concatenated_refseq/refseq.fna.gz"
    output:
        "results/seqinfo/refseq_acc_len_taxid.txt"
    params:
        prefix = "results/seqinfo/refseq",
        seq_info = "nucl_gb nucl_wgs dead_nucl dead_wgs",
	rank = config["rank"]
    threads:
        config["threads"]
    resources:
        mem_mb = config["mem_mb"]
    log:
        std = "results/logs/acc_len_taxid_std.txt",
        err = "results/logs/acc_len_taxid_err.txt"
    conda:
        "envs/ganon.yml"
    benchmark:
        "results/benchmark/acc_len_taxid.txt"
    shell:
        """
        python scripts/acc_len_taxid.py build --db-prefix {params.prefix} --input-files {input.refseq} --rank {params.rank} --max-bloom-size {resources.mem_mb} --seq-info {params.seq_info} --taxdump-file {input.taxdump} --threads {threads} > {log.std} 2> {log.err}
        """

rule ganon_build:
    input:
        taxdump = "results/extracted_files/ncbi_taxonomy/taxdump.tar.gz",
        refseq = "results/concatenated_refseq/refseq.fna.gz",
        top3 = "results/seqinfo/seqinfo_assembly_top_3.txt"
    output:
        "results/ganon_build/refseq.ibf",
        "results/ganon_build/refseq.gnn"
    params:
        prefix = "results/ganon_build/refseq",
        rank = config["rank"],
        max_bloom_size = config["max_bloom_size"]
    threads:
        config["threads"]
    resources:
        mem_mb = config["mem_mb"]
    conda:
        "envs/ganon.yml"
    benchmark:
        "results/benchmark/ganon_build.txt"
    log:
        std = "results/logs/ganon_build_std.txt",
        err = "results/logs/ganon_build_err.txt"
    shell:
        """
        rm -rf results/extracted_files/refseq
        ganon build --db-prefix {params.prefix} --input-files {input.refseq} --rank {params.rank} --max-bloom-size {params.max_bloom_size} --seq-info-file {input.top3} --taxdump-file {input.taxdump} --threads {threads} > {log.std} 2> {log.err}
        """

rule join:
    input:
        seqinfo = "results/seqinfo/refseq_acc_len_taxid.txt",
        acc_assembly = "results/seqinfo/acc_assembly.txt"
    output:
        "results/seqinfo/seqinfo_assembly.txt"
    shell:
        """
        join <(sort -k1,1 {input.seqinfo}) <(sort -k1,1 {input.acc_assembly}) -t$'\\t' -o "1.1,1.2,1.3,2.2" > {output}
        """

rule top3:
    input:
        "results/seqinfo/seqinfo_assembly.txt"
    output:
        "results/seqinfo/seqinfo_assembly_top_3.txt"
    params:
        top = 3
    shell:
        """
        ./scripts/top.py {input} {output}
        """

rule deinterleave:
    input:
        interleaved = lambda wildcards: os.path.abspath(config["samples"][wildcards.sample])
    output:
        forward = "results/deinterleave/{sample}_forward.fq.gz",
        reverse = "results/deinterleave/{sample}_reverse.fq.gz"
    params:
        forward = "results/deinterleave/{sample}_forward.fq",
        reverse = "results/deinterleave/{sample}_reverse.fq"
    threads:
        8
    shell:
        """
        zcat {input.interleaved} |paste - - - - - - - - | tee >(cut -f 1-4 | tr "\t" "\n" > {params.forward}) | cut -f 5-8 | tr "\t" "\n" > {params.reverse}
        cat {params.forward} | pigz -9 -p{threads} > {output.forward}
        cat {params.reverse} | pigz -9 -p{threads} > {output.reverse}
        rm -f {params.forward} {params.reverse}
        """

rule ganon_classify:
    input:
        db = "results/ganon_build/refseq.ibf",
        forward = "results/deinterleave/{sample}_forward.fq.gz",
        reverse = "results/deinterleave/{sample}_reverse.fq.gz"
    output:
        lca = "results/ganon_classify/{sample}_classified.lca"
    params:
        min_kmers = config["min_kmers"],
        output_prefix = "results/ganon_classify/{sample}_classified",
        db_prefix = "results/ganon_build/refseq"
    threads:
        config["threads"]
    resources:
        mem_mb = config["mem_mb"]
    log:
        std = "results/logs/{sample}_ganon_classify_std.txt",
        err = "results/logs/{sample}_ganon_classify_err.txt"
    conda:
        "envs/ganon.yml"
    benchmark:
        "results/benchmark/{sample}_ganon_classify.txt"
    shell:
        """
        ganon classify --min-kmers {params.min_kmers} --output-prefix {params.output_prefix} --threads {threads} --db-prefix {params.db_prefix} --paired-reads {input.forward} {input.reverse} > {log.std} 2> {log.err}
        """

rule postprocessing:
    input:
        lca = "results/ganon_classify/{sample}_classified.lca"
    params:
        sample_name = "rhizosphere",
        sample_number = "{sample}"
    output:
        tsv = "results/postprocessing/{sample}.tsv"
    shell:
        """sed p {input.lca} | awk '/[/]1/&&v++%2{{sub(/[/]1/, "/2")}}{{print}}' | sort | """ \
        """awk 'BEGIN {{printf "@Version:0.9.1\\n@SampleID:{params.sample_name}_{params.sample_number}\\n\\n@@SEQUENCEID\\""" \
        """tTAXID\\tBINID\\n"}} {{print $1 "\\t" $2 "\\t" $2}}' > {output.tsv}"""
